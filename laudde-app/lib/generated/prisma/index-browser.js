
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  cnpj: 'cnpj',
  CRMV: 'CRMV',
  phone: 'phone',
  instagramHandle: 'instagramHandle',
  instagramURL: 'instagramURL',
  twitterHandle: 'twitterHandle',
  twitterURL: 'twitterURL',
  websiteHandle: 'websiteHandle',
  websiteURL: 'websiteURL',
  address: 'address',
  city: 'city',
  state: 'state',
  profilePictureURL: 'profilePictureURL',
  logoPictureURL: 'logoPictureURL',
  signaturePictureURL: 'signaturePictureURL',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  species: 'species',
  breed: 'breed',
  sex: 'sex',
  age: 'age',
  ageUnit: 'ageUnit',
  ownerName: 'ownerName',
  ownerPhone: 'ownerPhone',
  createdAt: 'createdAt'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cnpj: 'cnpj',
  address: 'address',
  city: 'city',
  state: 'state',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  clinicId: 'clinicId',
  type: 'type',
  categoryUltrasound: 'categoryUltrasound',
  categoryXRay: 'categoryXRay',
  findings: 'findings',
  conclusion: 'conclusion',
  createdAt: 'createdAt',
  status: 'status',
  baseValue: 'baseValue',
  additionalValue: 'additionalValue',
  code: 'code'
};

exports.Prisma.ReportImageScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.MeasurementScalarFieldEnum = {
  id: 'id',
  organ: 'organ',
  value: 'value',
  reportId: 'reportId'
};

exports.Prisma.TextTemplateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  categoryUltrasound: 'categoryUltrasound',
  categoryXRay: 'categoryXRay',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.ConclusionTemplateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  categoryUltrasound: 'categoryUltrasound',
  categoryXRay: 'categoryXRay',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  amount: 'amount',
  method: 'method',
  source: 'source',
  sourceId: 'sourceId',
  date: 'date',
  status: 'status'
};

exports.Prisma.FinancialTransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  category: 'category',
  description: 'description',
  amount: 'amount',
  date: 'date',
  relatedReportId: 'relatedReportId',
  relatedClinicId: 'relatedClinicId',
  relatedPatientId: 'relatedPatientId',
  paymentMethod: 'paymentMethod',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  veterinarian: 'veterinarian'
};

exports.Sex = exports.$Enums.Sex = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.AgeUnit = exports.$Enums.AgeUnit = {
  YEARS: 'YEARS',
  MONTHS: 'MONTHS',
  DAYS: 'DAYS'
};

exports.ExamType = exports.$Enums.ExamType = {
  OLTRASOUND: 'OLTRASOUND',
  X_RAY: 'X_RAY'
};

exports.UltrasoundCategory = exports.$Enums.UltrasoundCategory = {
  ABDOMINAL: 'ABDOMINAL',
  CARDIAC: 'CARDIAC',
  REPRODUCTIVE: 'REPRODUCTIVE',
  MUSCULOSKELETAL: 'MUSCULOSKELETAL',
  THYROID: 'THYROID',
  OVARIAN: 'OVARIAN',
  PROSTATE: 'PROSTATE',
  URINARY: 'URINARY',
  ABDOMEN: 'ABDOMEN',
  THORACIC: 'THORACIC',
  ABDOMEN_PELVIS: 'ABDOMEN_PELVIS',
  OCULAR: 'OCULAR'
};

exports.XRayCategory = exports.$Enums.XRayCategory = {
  THORACIC: 'THORACIC',
  ABDOMINAL: 'ABDOMINAL',
  SKELETAL: 'SKELETAL',
  DENTAL: 'DENTAL'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  DRAFT: 'DRAFT',
  COMPLETED: 'COMPLETED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CASH: 'CASH',
  PIX: 'PIX',
  CHECK: 'CHECK'
};

exports.PaymentSource = exports.$Enums.PaymentSource = {
  CLINIC: 'CLINIC',
  PATIENT_OWNER: 'PATIENT_OWNER',
  VETERINARIAN: 'VETERINARIAN'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  COMPLETED: 'COMPLETED',
  PENDINHG: 'PENDINHG'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Patient: 'Patient',
  Clinic: 'Clinic',
  Report: 'Report',
  ReportImage: 'ReportImage',
  Measurement: 'Measurement',
  TextTemplate: 'TextTemplate',
  ConclusionTemplate: 'ConclusionTemplate',
  Payment: 'Payment',
  FinancialTransaction: 'FinancialTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
