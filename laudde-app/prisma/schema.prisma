// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  admin
  veterinarian
}

enum Sex {
  MALE
  FEMALE
}

enum AgeUnit {
  YEARS
  MONTHS
  DAYS
}

enum ExamType {
  ULTRASOUND
  X_RAY
}

enum UltrasoundCategory {
  ABDOMINAL
  CARDIAC
  REPRODUCTIVE
  MUSCULOSKELETAL
  THYROID
  OVARIAN
  PROSTATE
  URINARY
  ABDOMEN
  THORACIC
  ABDOMEN_PELVIS
  OCULAR
}

enum XRayCategory {
  THORACIC
  ABDOMINAL
  SKELETAL
  DENTAL
}

enum ReportStatus {
  DRAFT
  COMPLETED
  PUBLISHED
  ARCHIVED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  PIX
  CHECK
}

enum PaymentSource {
  CLINIC
  PATIENT_OWNER
  VETERINARIAN
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  COMPLETED
  PENDINHG
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  profile   UserProfile?
  role      UserRole

  patient      Patient[]
  veterinarian Veterinarian[]
  clinic       Clinic[]

  PatientOwner  PatientOwner[]
  ModelTemplate ModelTemplate[]
  Report        Report[]
}

model UserProfile {
  id     String  @id @default(uuid())
  userId String  @unique
  name   String
  cnpj   String? @unique
  CRMV   String? @unique
  phone  String?
  pixKey String?

  avatarPictureUrl    String? @default("https://placehold.co/160x160?text=Avatar")
  logoPictureURL      String? @default("https://placehold.co/160x160?text=Logo")
  signaturePictureURL String? @default("https://placehold.co/160x80?text=Assinatura")

  instagramHandle String?
  instagramURL    String?
  twitterHandle   String?
  twitterURL      String?
  websiteHandle   String?
  websiteURL      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Patient {
  id         String   @id @default(uuid())
  name       String
  species    String?
  breed      String?
  sex        Sex?
  age        String?
  ageUnit    AgeUnit?
  ownerName  String?
  ownerPhone String?
  weight     String?
  weightUnit String?
  createdAt  DateTime @default(now())

  userId String
  user   User?  @relation(fields: [userId], references: [id])

  patientOwnerId String
  patientOwner   PatientOwner @relation(fields: [patientOwnerId], references: [id])

  reports               Report[]
  Payment               Payment[]
  financialTransactions FinancialTransaction[]
}

model PatientOwner {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String?  @unique
  address   String?
  city      String?
  state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  patients Patient[]
}

model Veterinarian {
  id       String  @id @default(uuid())
  name     String
  phone    String
  whatsapp String
  email    String? @unique
  userId   String
  user     User    @relation(fields: [userId], references: [id])

  crmNumber String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]
}

model Clinic {
  id           String                 @id @default(uuid())
  name         String
  cnpj         String?                @unique
  address      String?
  city         String?
  state        String?
  phone        String
  whatsapp     String
  email        String                 @unique
  createdAt    DateTime               @default(now())
  reports      Report[]
  payments     Payment[]
  transactions FinancialTransaction[]
  userId       String
  user         User?                  @relation(fields: [userId], references: [id])
}

model ModelTemplate {
  id        String   @id @default(uuid())
  title     String
  fields    Json? // campos do modelo, por exemplo: { "field1": "value1", "field2": "value2" }
  examType  String? // Tipo de exame, por exemplo: "Ultrassom", "Raio-X", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Autor opcional
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?
}

model Report {
  id        String  @id @default(uuid())
  patientId String?
  clinicId  String?
  userId    String

  status ReportStatus @default(DRAFT)
  label  String?      @default("Laudo Veterinário")
  fields Json?

  accessCode          String // Código simples para acesso
  documentoPublicHash String    @unique
  expiresAt           DateTime?
  maxAttempts         Int       @default(5)
  attemptCount        Int       @default(0)
  isBlocked           Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  patient       Patient?               @relation(fields: [patientId], references: [id])
  clinic        Clinic?                @relation(fields: [clinicId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  images        ReportImage[]
  services      ReportService[]
  accesses      AccessLog[]
  veterinarians Veterinarian[]
  payment       Payment?
  transactions  FinancialTransaction[]
  ReportAccess  ReportAccess[]
}

model ReportAccess {
  id           String    @id @default(uuid())
  reportId     String
  passwordHash String
  publicHash   String    @unique
  expiresAt    DateTime?
  maxAttempts  Int       @default(5)
  attemptCount Int       @default(0)
  isBlocked    Boolean   @default(false)

  report Report @relation(fields: [reportId], references: [id])
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  baseValue   Decimal? @default(0.00)

  discountValue   Decimal? @default(0.00)
  totalValue      Decimal? @default(0.00)
  additionalValue Decimal? @default(0.00)

  reports ReportService[]
}

model ReportService {
  reportId  String
  serviceId String

  report  Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  quantity Int     @default(1)
  price    Decimal @default(0.00) // valor aplicado para este serviço neste relatório

  @@id([reportId, serviceId]) // composição da chave primária
}

model AccessLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?
  success   Boolean // true = acesso permitido, false = senha incorreta, bloqueado etc.
}

model ReportImage {
  id        String   @id @default(uuid())
  reportId  String
  url       String
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id])
}

model Payment {
  id       String            @id @default(uuid())
  reportId String            @unique
  amount   Float
  method   PaymentMethod
  source   PaymentSource
  sourceId String
  date     DateTime
  status   TransactionStatus
  report   Report            @relation(fields: [reportId], references: [id])
  clinic   Clinic?           @relation(fields: [sourceId], references: [id], map: "Payment_clinic_sourceId_fkey")
  patient  Patient?          @relation(fields: [sourceId], references: [id], map: "Payment_patient_sourceId_fkey")
}

model FinancialTransaction {
  id               String            @id @default(uuid())
  type             TransactionType
  category         String
  description      String
  amount           Float
  date             DateTime
  relatedReportId  String?
  relatedClinicId  String?
  relatedPatientId String?
  paymentMethod    String?
  status           TransactionStatus
  report           Report?           @relation(fields: [relatedReportId], references: [id])
  clinic           Clinic?           @relation(fields: [relatedClinicId], references: [id])
  patient          Patient?          @relation(fields: [relatedPatientId], references: [id])
}
